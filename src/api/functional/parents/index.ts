/**
 * @packageDocumentation
 * @module api.functional.parents
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type { Parents } from '../../dto/parents/parents.dto';

/**
 * @controller ParentsController.getAll
 * @path GET /parents
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getAll(connection: IConnection): Promise<getAll.Output> {
  return PlainFetcher.fetch(connection, {
    ...getAll.METADATA,
    path: getAll.path(),
  } as const);
}
export namespace getAll {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/parents',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return '/parents';
  };
}

/**
 * @controller ParentsController.getParents
 * @path GET /parents/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getParents(
  connection: IConnection,
  id: string,
): Promise<getParents.Output> {
  return PlainFetcher.fetch(connection, {
    ...getParents.METADATA,
    path: getParents.path(id),
  } as const);
}
export namespace getParents {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/parents/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/parents/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller ParentsController.create
 * @path POST /parents
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createParents: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...create.METADATA,
      path: create.path(),
    } as const,
    createParents,
  );
}
export namespace create {
  export type Input = Primitive<Parents>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'POST',
    path: '/parents',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return '/parents';
  };
}

/**
 * @controller ParentsController.updateParents
 * @path PUT /parents/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateParents(
  connection: IConnection,
  id: string,
  update: updateParents.Input,
): Promise<updateParents.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...updateParents.METADATA,
      path: updateParents.path(id),
    } as const,
    update,
  );
}
export namespace updateParents {
  export type Input = Primitive<Parents>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'PUT',
    path: '/parents/:id',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/parents/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller ParentsController.deleteParents
 * @path DELETE /parents/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteParents(
  connection: IConnection,
  id: string,
): Promise<deleteParents.Output> {
  return PlainFetcher.fetch(connection, {
    ...deleteParents.METADATA,
    path: deleteParents.path(id),
  } as const);
}
export namespace deleteParents {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'DELETE',
    path: '/parents/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/parents/${encodeURIComponent(id ?? 'null')}`;
  };
}
