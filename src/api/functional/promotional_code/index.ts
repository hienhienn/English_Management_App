/**
 * @packageDocumentation
 * @module api.functional.promotional_code
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type {
  CreatePromotionalCode,
  UpdatePromotionalCode,
} from '../../dto/promotional-code/promotional-code.dto';

export * as query from './query';

/**
 * @controller PromotionalCodeController.create
 * @path POST /promotional-code
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createCode: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...create.METADATA,
      path: create.path(),
    } as const,
    createCode,
  );
}
export namespace create {
  export type Input = Primitive<CreatePromotionalCode>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'POST',
    path: '/promotional-code',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return '/promotional-code';
  };
}

/**
 * @controller PromotionalCodeController.findAll
 * @path GET /promotional-code
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findAll(
  connection: IConnection,
): Promise<findAll.Output> {
  return PlainFetcher.fetch(connection, {
    ...findAll.METADATA,
    path: findAll.path(),
  } as const);
}
export namespace findAll {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/promotional-code',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return '/promotional-code';
  };
}

/**
 * @controller PromotionalCodeController.findOne
 * @path GET /promotional-code/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findOne(
  connection: IConnection,
  id: string,
): Promise<findOne.Output> {
  return PlainFetcher.fetch(connection, {
    ...findOne.METADATA,
    path: findOne.path(id),
  } as const);
}
export namespace findOne {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/promotional-code/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/promotional-code/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller PromotionalCodeController.update
 * @path PATCH /promotional-code/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  id: string,
  updateCode: update.Input,
): Promise<update.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...update.METADATA,
      path: update.path(id),
    } as const,
    updateCode,
  );
}
export namespace update {
  export type Input = Primitive<UpdatePromotionalCode>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'PATCH',
    path: '/promotional-code/:id',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/promotional-code/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller PromotionalCodeController.remove
 * @path DELETE /promotional-code/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function remove(
  connection: IConnection,
  id: string,
): Promise<remove.Output> {
  return PlainFetcher.fetch(connection, {
    ...remove.METADATA,
    path: remove.path(id),
  } as const);
}
export namespace remove {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'DELETE',
    path: '/promotional-code/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/promotional-code/${encodeURIComponent(id ?? 'null')}`;
  };
}
