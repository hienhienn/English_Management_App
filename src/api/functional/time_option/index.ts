/**
 * @packageDocumentation
 * @module api.functional.time_option
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type { NormalQuery } from '../../dto/normal-query.dto';
import type {
  CreateTimeOption,
  UpdateTimeOption,
} from '../../dto/selection/time-option.dto';

export * as active from './active';

/**
 * @controller TimeOptionController.create
 * @path POST /time-option
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createSettingDto: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...create.METADATA,
      path: create.path(),
    } as const,
    createSettingDto,
  );
}
export namespace create {
  export type Input = Primitive<CreateTimeOption>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'POST',
    path: '/time-option',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return '/time-option';
  };
}

/**
 * @controller TimeOptionController.findAll
 * @path GET /time-option
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findAll(
  connection: IConnection,
  query: findAll.Query,
): Promise<findAll.Output> {
  return PlainFetcher.fetch(connection, {
    ...findAll.METADATA,
    path: findAll.path(query),
  } as const);
}
export namespace findAll {
  export type Query = Resolved<NormalQuery>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/time-option',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (query: findAll.Query): string => {
    const variables: Record<any, any> = query as any;
    const search: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(variables))
      if (value === undefined) continue;
      else if (Array.isArray(value))
        value.forEach((elem) => search.append(key, String(elem)));
      else search.set(key, String(value));
    const encoded: string = search.toString();
    return `/time-option${encoded.length ? `?${encoded}` : ''}`;
  };
}

/**
 * @controller TimeOptionController.findOne
 * @path GET /time-option/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findOne(
  connection: IConnection,
  id: string,
): Promise<findOne.Output> {
  return PlainFetcher.fetch(connection, {
    ...findOne.METADATA,
    path: findOne.path(id),
  } as const);
}
export namespace findOne {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/time-option/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/time-option/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller TimeOptionController.update
 * @path PATCH /time-option/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  id: string,
  updateTimeOption: update.Input,
): Promise<update.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...update.METADATA,
      path: update.path(id),
    } as const,
    updateTimeOption,
  );
}
export namespace update {
  export type Input = Primitive<UpdateTimeOption>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'PATCH',
    path: '/time-option/:id',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/time-option/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller TimeOptionController.remove
 * @path DELETE /time-option/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function remove(
  connection: IConnection,
  id: string,
): Promise<remove.Output> {
  return PlainFetcher.fetch(connection, {
    ...remove.METADATA,
    path: remove.path(id),
  } as const);
}
export namespace remove {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'DELETE',
    path: '/time-option/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/time-option/${encodeURIComponent(id ?? 'null')}`;
  };
}
