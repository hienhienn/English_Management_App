/**
 * @packageDocumentation
 * @module api.functional.schedule
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type { Schedule, UpdateSchedule } from '../../dto/schedule/schedule.dto';

export * as all from './all';
export * as list from './list';
export * as by_class from './by_class';
export * as getAttendanceForStudent from './getAttendanceForStudent';
export * as createDefaultSchedule from './createDefaultSchedule';
export * as addFromSchedule from './addFromSchedule';

/**
 * @controller ScheduleController.getSchedule
 * @path GET /schedule/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getSchedule(
  connection: IConnection,
  id: string,
): Promise<getSchedule.Output> {
  return PlainFetcher.fetch(connection, {
    ...getSchedule.METADATA,
    path: getSchedule.path(id),
  } as const);
}
export namespace getSchedule {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/schedule/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/schedule/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller ScheduleController.create
 * @path POST /schedule
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createSchedule: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...create.METADATA,
      path: create.path(),
    } as const,
    createSchedule,
  );
}
export namespace create {
  export type Input = Primitive<Schedule>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'POST',
    path: '/schedule',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return '/schedule';
  };
}

/**
 * @controller ScheduleController.updateSchedule
 * @path PUT /schedule/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateSchedule(
  connection: IConnection,
  id: string,
  update: updateSchedule.Input,
): Promise<updateSchedule.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...updateSchedule.METADATA,
      path: updateSchedule.path(id),
    } as const,
    update,
  );
}
export namespace updateSchedule {
  export type Input = Primitive<UpdateSchedule>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'PUT',
    path: '/schedule/:id',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/schedule/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller ScheduleController.deleteSchedule
 * @path DELETE /schedule/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteSchedule(
  connection: IConnection,
  id: string,
): Promise<deleteSchedule.Output> {
  return PlainFetcher.fetch(connection, {
    ...deleteSchedule.METADATA,
    path: deleteSchedule.path(id),
  } as const);
}
export namespace deleteSchedule {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'DELETE',
    path: '/schedule/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/schedule/${encodeURIComponent(id ?? 'null')}`;
  };
}
