/**
 * @packageDocumentation
 * @module api.functional.comment.student
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type {
  CreateStudentComment,
  UpdateStudentComment,
} from '../../../dto/comment/student-comment.dto';

/**
 * @controller CommentController.findAllStudent
 * @path GET /comment/student
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findAllStudent(
  connection: IConnection,
): Promise<findAllStudent.Output> {
  return PlainFetcher.fetch(connection, {
    ...findAllStudent.METADATA,
    path: findAllStudent.path(),
  } as const);
}
export namespace findAllStudent {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/comment/student',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return '/comment/student';
  };
}

/**
 * @controller CommentController.findOneStudent
 * @path GET /comment/student/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findOneStudent(
  connection: IConnection,
  id: string,
): Promise<findOneStudent.Output> {
  return PlainFetcher.fetch(connection, {
    ...findOneStudent.METADATA,
    path: findOneStudent.path(id),
  } as const);
}
export namespace findOneStudent {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/comment/student/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/comment/student/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller CommentController.createforstudent
 * @path POST /comment/student
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createforstudent(
  connection: IConnection,
  createCommentDto: createforstudent.Input,
): Promise<createforstudent.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...createforstudent.METADATA,
      path: createforstudent.path(),
    } as const,
    createCommentDto,
  );
}
export namespace createforstudent {
  export type Input = Primitive<CreateStudentComment>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'POST',
    path: '/comment/student',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return '/comment/student';
  };
}

/**
 * @controller CommentController.updatestudent
 * @path PATCH /comment/student/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updatestudent(
  connection: IConnection,
  id: string,
  updateStudentComment: updatestudent.Input,
): Promise<updatestudent.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...updatestudent.METADATA,
      path: updatestudent.path(id),
    } as const,
    updateStudentComment,
  );
}
export namespace updatestudent {
  export type Input = Primitive<UpdateStudentComment>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'PATCH',
    path: '/comment/student/:id',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/comment/student/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller CommentController.removeTeacher
 * @path DELETE /comment/student/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function removeTeacher(
  connection: IConnection,
  id: string,
): Promise<removeTeacher.Output> {
  return PlainFetcher.fetch(connection, {
    ...removeTeacher.METADATA,
    path: removeTeacher.path(id),
  } as const);
}
export namespace removeTeacher {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'DELETE',
    path: '/comment/student/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/comment/student/${encodeURIComponent(id ?? 'null')}`;
  };
}
