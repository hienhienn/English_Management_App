/**
 * @packageDocumentation
 * @module api.functional.course
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type { Course, CreateCourse } from '../../dto/course/course.dto';

export * as all from './all';
export * as list from './list';

/**
 * @controller CourseController.getCourse
 * @path GET /course/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getCourse(
  connection: IConnection,
  id: string,
): Promise<getCourse.Output> {
  return PlainFetcher.fetch(connection, {
    ...getCourse.METADATA,
    path: getCourse.path(id),
  } as const);
}
export namespace getCourse {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/course/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/course/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller CourseController.create
 * @path POST /course
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createCourse: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...create.METADATA,
      path: create.path(),
    } as const,
    createCourse,
  );
}
export namespace create {
  export type Input = Primitive<CreateCourse>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'POST',
    path: '/course',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return '/course';
  };
}

/**
 * @controller CourseController.updateCourse
 * @path PUT /course/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateCourse(
  connection: IConnection,
  id: string,
  update: updateCourse.Input,
): Promise<updateCourse.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...updateCourse.METADATA,
      path: updateCourse.path(id),
    } as const,
    update,
  );
}
export namespace updateCourse {
  export type Input = Primitive<Course>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'PUT',
    path: '/course/:id',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/course/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller CourseController.deleteCourse
 * @path DELETE /course/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteCourse(
  connection: IConnection,
  id: string,
): Promise<deleteCourse.Output> {
  return PlainFetcher.fetch(connection, {
    ...deleteCourse.METADATA,
    path: deleteCourse.path(id),
  } as const);
}
export namespace deleteCourse {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'DELETE',
    path: '/course/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/course/${encodeURIComponent(id ?? 'null')}`;
  };
}
