/**
 * @packageDocumentation
 * @module api.functional.work_attendance
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type {
  CreateWorkAttendance,
  UpdateWorkAttendance,
} from '../../dto/work-attendance/work-attendance.dto';

export * as all from './all';
export * as query from './query';

/**
 * @controller WorkAttendanceController.getWorkAttendance
 * @path GET /work-attendance/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getWorkAttendance(
  connection: IConnection,
  id: string,
): Promise<getWorkAttendance.Output> {
  return PlainFetcher.fetch(connection, {
    ...getWorkAttendance.METADATA,
    path: getWorkAttendance.path(id),
  } as const);
}
export namespace getWorkAttendance {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/work-attendance/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/work-attendance/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller WorkAttendanceController.create
 * @path POST /work-attendance
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createWorkAttendance: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...create.METADATA,
      path: create.path(),
    } as const,
    createWorkAttendance,
  );
}
export namespace create {
  export type Input = Primitive<CreateWorkAttendance>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'POST',
    path: '/work-attendance',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return '/work-attendance';
  };
}

/**
 * @controller WorkAttendanceController.updateWorkAttendance
 * @path PUT /work-attendance/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateWorkAttendance(
  connection: IConnection,
  id: string,
  update: updateWorkAttendance.Input,
): Promise<updateWorkAttendance.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...updateWorkAttendance.METADATA,
      path: updateWorkAttendance.path(id),
    } as const,
    update,
  );
}
export namespace updateWorkAttendance {
  export type Input = Primitive<UpdateWorkAttendance>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'PUT',
    path: '/work-attendance/:id',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/work-attendance/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller WorkAttendanceController.deleteWorkAttendance
 * @path DELETE /work-attendance/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteWorkAttendance(
  connection: IConnection,
  id: string,
): Promise<deleteWorkAttendance.Output> {
  return PlainFetcher.fetch(connection, {
    ...deleteWorkAttendance.METADATA,
    path: deleteWorkAttendance.path(id),
  } as const);
}
export namespace deleteWorkAttendance {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'DELETE',
    path: '/work-attendance/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/work-attendance/${encodeURIComponent(id ?? 'null')}`;
  };
}
