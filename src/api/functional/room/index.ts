/**
 * @packageDocumentation
 * @module api.functional.room
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type { CreateRoom, Room } from '../../dto/room/room.dto';

export * as all from './all';
export * as list from './list';

/**
 * @controller RoomController.getRoom
 * @path GET /room/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getRoom(
  connection: IConnection,
  id: string,
): Promise<getRoom.Output> {
  return PlainFetcher.fetch(connection, {
    ...getRoom.METADATA,
    path: getRoom.path(id),
  } as const);
}
export namespace getRoom {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/room/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/room/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller RoomController.create
 * @path POST /room
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createRoom: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...create.METADATA,
      path: create.path(),
    } as const,
    createRoom,
  );
}
export namespace create {
  export type Input = Primitive<CreateRoom>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'POST',
    path: '/room',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return '/room';
  };
}

/**
 * @controller RoomController.updateRoom
 * @path PUT /room/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateRoom(
  connection: IConnection,
  id: string,
  update: updateRoom.Input,
): Promise<updateRoom.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...(connection.headers ?? {}),
        'Content-Type': 'application/json',
      },
    },
    {
      ...updateRoom.METADATA,
      path: updateRoom.path(id),
    } as const,
    update,
  );
}
export namespace updateRoom {
  export type Input = Primitive<Room>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'PUT',
    path: '/room/:id',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/room/${encodeURIComponent(id ?? 'null')}`;
  };
}

/**
 * @controller RoomController.deleteRoom
 * @path DELETE /room/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteRoom(
  connection: IConnection,
  id: string,
): Promise<deleteRoom.Output> {
  return PlainFetcher.fetch(connection, {
    ...deleteRoom.METADATA,
    path: deleteRoom.path(id),
  } as const);
}
export namespace deleteRoom {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'DELETE',
    path: '/room/:id',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string): string => {
    return `/room/${encodeURIComponent(id ?? 'null')}`;
  };
}
