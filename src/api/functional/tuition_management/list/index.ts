/**
 * @packageDocumentation
 * @module api.functional.tuition_management.list
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type { TuitionQuery } from '../../../dto/tuition-management/tuition-query.dto';

/**
 * @controller TuitionManagementController.getWithQuery
 * @path GET /tuition-management/list
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getWithQuery(
  connection: IConnection,
  query: getWithQuery.Query,
): Promise<getWithQuery.Output> {
  return PlainFetcher.fetch(connection, {
    ...getWithQuery.METADATA,
    path: getWithQuery.path(query),
  } as const);
}
export namespace getWithQuery {
  export type Query = Resolved<TuitionQuery>;
  export type Output = Primitive<any>;

  export const METADATA = {
    method: 'GET',
    path: '/tuition-management/list',
    request: null,
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (query: getWithQuery.Query): string => {
    const variables: Record<any, any> = query as any;
    const search: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(variables))
      if (value === undefined) continue;
      else if (Array.isArray(value))
        value.forEach((elem) => search.append(key, String(elem)));
      else search.set(key, String(value));
    const encoded: string = search.toString();
    return `/tuition-management/list${encoded.length ? `?${encoded}` : ''}`;
  };
}
